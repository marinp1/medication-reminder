import { Base } from 'better-validator/src/Base';
import { IsAnything } from './IsAnything';
import { IsString } from 'better-validator/src/IsString';
export declare type ObjectValidator<T> = (validator: ChildValidator<T>) => void;
export declare type ChildValidator<T> = ((property: keyof T) => IsAnything) &
  (() => IsObject<T>);
export declare type StringObjectValidator = (
  validator: StringChildValidator,
) => void;
export declare type StringChildValidator = ((property: string) => IsString) &
  (() => IsObject<string>);
export declare type BaseConstructor = new (
  path: Array<string | number>,
) => Base;
export declare class IsObject<T> extends Base {
  protected properties: string[];
  protected objectValidator: ObjectValidator<T>;
  protected elementValidator: BaseConstructor;
  protected elementValidatorName: string;
  constructor(
    path: Array<string | number>,
    objectValidator: ObjectValidator<T>,
    elementValidator: BaseConstructor,
    elementValidatorName: string,
  );
  public strict(): this;
  protected childValidator<T>(property: T): Base;
}
