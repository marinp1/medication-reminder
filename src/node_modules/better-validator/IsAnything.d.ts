import { Base } from 'better-validator/src/Base';
import { IsArrayOf } from 'better-validator/src/IsArrayOf';
import { IsArrayOrObjectOf } from 'better-validator/src/IsArrayOrObjectOf';
import { IsBoolean } from 'better-validator/src/IsBoolean';
import { IsNumber } from 'better-validator/src/IsNumber';
import { IsObject, ObjectValidator } from './IsObject';
import { IsString } from 'better-validator/src//IsString';

export declare type ArrayValidator = (validator: IsAnything) => void;
export declare class IsAnything extends Base {
  constructor(path: Array<string | number> | null);
  public isNumber(): IsNumber;
  public isBoolean(): IsBoolean;
  public isString(): IsString;
  public isObject<T>(objectValidator: ObjectValidator<T>): IsObject<T>;
  public isObjectArray<T>(childValidator: ObjectValidator<T>): IsArrayOf;
  public isArrayOrObject<T>(
    childValidator: ObjectValidator<T>,
  ): IsArrayOrObjectOf;
  public isArray(childValidator: ArrayValidator): IsArrayOf;
}
